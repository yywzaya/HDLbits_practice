//method_1 实例化
module top_module (
    input [3:0] x,
    input [3:0] y, 
    output [4:0] sum);
    
    wire cout0,cout1,cout2;
    adder add0 (x[0],y[0],0,sum[0],cout0);
    adder add1 (x[1],y[1],cout0,sum[1],cout1);
    adder add2 (x[2],y[2],cout1,sum[2],cout2);
    adder add3 (x[3],y[3],cout2,sum[3],sum[4]);

endmodule

module adder(
    input a,b,cin,
    output sum,cout);
    
    assign sum = a ^ b ^ cin;
    assign cout = (a&b) | (a&cin) | (b&cin);
endmodule

//method_2 直接加法
module top_module (
	input [3:0] x,
	input [3:0] y,
	output [4:0] sum
);

	// This circuit is a 4-bit ripple-carry adder with carry-out.
	assign sum = x+y;	// Verilog addition automatically produces the carry-out bit.

	// Verilog quirk: Even though the value of (x+y) includes the carry-out, (x+y) is still considered to be a 4-bit number (The max width of the two operands).
	// This is correct:
	// assign sum = (x+y);
	// But this is incorrect:
	// assign sum = {x+y};	// Concatenation operator: This discards the carry-out
endmodule
